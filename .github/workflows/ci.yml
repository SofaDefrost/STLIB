name: CI

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  build-and-test:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        sofa_branch: [master]

    steps:
      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v5
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'standard'
      
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}
      
      - name: Build and install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
                  -DPYTHON_ROOT=$PYTHON_ROOT \
                  -DPython_ROOT=$PYTHON_ROOT \
                  -DPYTHON_EXECUTABLE=$PYTHON_ROOT/python.exe \
                  -DPython_EXECUTABLE=$PYTHON_ROOT/python.exe \
                  ../src \
              && ninja install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
              -DPYTHON_ROOT=$PYTHON_ROOT \
              -DPython_ROOT=$PYTHON_ROOT \
              -DPYTHON_EXECUTABLE=$PYTHON_ROOT/python \
              -DPython_EXECUTABLE=$PYTHON_ROOT/python \
              ../src
            ninja install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi

      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: STLIB_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

  deploy:
    name: Deploy artifacts
    if: always() && startsWith(github.ref, 'refs/heads/') # we are on a branch (not a PR)
    needs: [build-and-test]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Zip artifacts and set env vars
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/artifacts
          for artifact in *; do
            zip $artifact.zip -r $artifact/*
          done
          PROJECT_NAME="${GITHUB_REPOSITORY#*/}"
          echo "PROJECT_NAME=$PROJECT_NAME" | tee -a $GITHUB_ENV
          
          RELEASE_NAME="${{ github.ref_name }}"
          RELEASE_TAGNAME="release-${{ github.ref_name }}"
          if [[ "${{ github.event.inputs.is_nightly }}" == "true" ]]; then
              RELEASE_NAME="$RELEASE_NAME-nightly"
              RELEASE_TAGNAME="$RELEASE_TAGNAME-nightly"
          fi
          RELEASE_DATE="$(date +'%Y-%m-%d (at %T UTC)')"
          echo "RELEASE_NAME=$RELEASE_NAME" | tee -a $GITHUB_ENV
          echo "RELEASE_TAGNAME=$RELEASE_TAGNAME" | tee -a $GITHUB_ENV
          echo "RELEASE_DATE=$RELEASE_DATE" | tee -a $GITHUB_ENV

      - name: Delete old release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: ${{ env.RELEASE_TAGNAME }}
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new release
        if: success() || failure()
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.RELEASE_TAGNAME }}
          fail_on_unmatched_files: false
          target_commitish: ${{ env.RELEASE_NAME }}
          body: |
            Last updated on ${{ env.RELEASE_DATE }}
          files: |
            artifacts/${{ env.PROJECT_NAME }}_*_Linux.zip
            artifacts/${{ env.PROJECT_NAME }}_*_Windows.zip
            artifacts/${{ env.PROJECT_NAME }}_*_macOS.zip
          
